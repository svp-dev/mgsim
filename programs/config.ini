NumProcessors = 128
NumProcessorsPerFPU = 2

MemoryType = RandomBanked

#
# Monitor settings
#
MonitorSampleDelay = 0.001 # delay in seconds
MonitorSampleVariables = cpu*.pipeline.execute.op, cpu*.pipeline.execute.flop
MonitorMetadataFile = mgtrace.md
MonitorTraceFile = mgtrace.out

#
# Event checking for the selector(s)
#
EventCheckFreq = 1 # megahertz of simulated time

#######################################################################################
###### Per-processor configuration
#######################################################################################

# Shared by all processors - for now
CoreFreq = 1000    # MHz

# The control block is the sequence of instructions controlled by one
# control word. The control word contains exactly 2 bits per
# instruction in the control block.  On our targets, instructions are
# 32-bit wide.  A control word has also at most the size of an instruction.
# So the control word defines a control block of at most 32/2 = 16 instructions.
# This is 64 bytes (4 bytes per instruction). A smaller control block
# is possible, for example to allow for a smaller cache line size.
ControlBlockSize = 64

#
# Core/memory interface constants
#
# the cache line size is pervasive, we don't support fine-grained
# configuration of this yet.
CacheLineSize    = 64	# Must be at least ControlBlockSize, and a power of two

#
# Network settings
#
CPU*.Network:LoadBalanceThreshold = 1

#
# L1 Cache configuration
#

#
# Instruction Cache
# Total Size = ICacheNumSets * ICacheAssociativity * CacheLineSize
#
CPU*.ICache:Associativity = 4
CPU*.ICache:NumSets       = 8
CPU*.ICache:OutgoingBufferSize = 2
CPU*.ICache:IncomingBufferSize = 2
CPU*.ICache:BankSelector  = DIRECT

#
# Data Cache
# Total Size = DCacheNumSets * DCacheAssociativity * CacheLineSize
#
CPU*.DCache:Associativity = 4
CPU*.DCache:NumSets       = 16
CPU*.DCache:IncomingBufferSize = 2
CPU*.DCache:OutgoingBufferSize = 2
CPU*.DCache:BankSelector  = XORFOLD

#
# Thread and Family Table
#
# FIXME: this ought to be configurable per core, however for now the
# network code does not properly adjust the TID and FID widths.  so we
# use a single shared configuration for the time being.
CPU*.Threads:NumEntries = 256
CPU*.Families:NumEntries = 32

#
# Register file
#
# FIXME: this ought to be configurable per core, however for now
# the network code does not properly adjust the RID width. so
# we use a single shared configuration for the time being.
CPU*.Registers:NumIntRegisters       = 1024
CPU*.Registers:NumFltRegisters       = 1024

#
# Register allocation unit
#
CPU*.RAU:IntRegistersBlockSize = 32
CPU*.RAU:FltRegistersBlockSize = 32

#
# Pipeline
#
CPU*.Pipeline:NumDummyStages = 0  # Number of delay stages between Memory and Writeback

#
# Ancillary registers
#
CPU*:NumAncillaryRegisters = 1

#
# Thread/family allocator
#

# CPU*.Alloc:InitialThreadAllocateQueueSize = 32 # if not set, defaults to Families.NumEntries, because there cannot be more families waiting for initial thread allocation.
# CPU*.Alloc:CreateQueueSize  = 32 # if not set, defaults to defaults to Families.NumEntries, because there cannot be more families waiting for creation.
# CPU*.Alloc:ThreadCleanupQueueSize = 256 # if not set, defaults to Threads.NumEntries, because there cannot be more threads waiting for final thread cleanup.

# FIXME: The following allocate queues should not be unbounded, but
# they have to be until the network implements separate channels for
# suspending and non-suspending operations.
CPU*.Alloc:FamilyAllocationSuspendQueueSize = -1
CPU*.Alloc:FamilyAllocationNoSuspendQueueSize = -1
CPU*.Alloc:FamilyAllocationExclusiveQueueSize = -1

#
# Settings for on-die misc. I/O components
#
# CPU.*:MMIO_BaseAddr = 0 # if specified and not zero, connects the component to the MMIO match unit on the core
CPU*.PerfCounters:MMIO_BaseAddr = 8
CPU*.Debug_Stdout:MMIO_BaseAddr = 0x200
CPU*.Debug_Stderr:MMIO_BaseAddr = 0x230



#######################################################################################
###### Per-FPU configuration
#######################################################################################

FPU*:NumUnits        = 5         # Number of FPU pipelines
FPU*.Source*:InputQueueSize = 2  # queue size from each processor

FPU*:Unit0Ops       = Add,Sub
FPU*:Unit0Latency   = 3
FPU*:Unit0Pipelined = true

FPU*:Unit1Ops       = Add,Sub
FPU*:Unit1Latency   = 3
FPU*:Unit1Pipelined = true

FPU*:Unit2Ops       = Mul
FPU*:Unit2Latency   = 3
FPU*:Unit2Pipelined = true

FPU*:Unit3Ops       = Div
FPU*:Unit3Latency   = 8
FPU*:Unit3Pipelined = false

FPU*:Unit4Ops       = Sqrt
FPU*:Unit4Latency   = 10
FPU*:Unit4Pipelined = false



#######################################################################################
###### Memory network configuration
#######################################################################################

# Frequency of memory network
MemoryFreq = 1000  # MHz

# Serial, Parallel, Banked and RandomBanked memory
# 
Memory:BaseRequestTime  = 1
Memory:TimePerLine      = 1
Memory:BufferSize       = 16

# Banked and RandomBanked memory
# 
# Memory:NumBanks    = 4    # When left out, will default to NumProcessors
# Memory:BankSelector = DIRECT # When left out, defaults to DIRECT for BANKEDMEMORY, RMIX for RANDOMBANKED, XORFOLD for COMA/ZLCOMA

#
# COMA memory settings
#
NumClientsPerL2Cache = 4

Memory:NumL2CachesPerRing      = 8
Memory:NumRootDirectories      = 4

Memory:EnableCacheInjection = true # For ZLCOMA only

Memory.*:NodeBufferSize = 2 # Size of incoming and outgoing buffer on the ring nodes

# L2 cache parameters
Memory:L2CacheAssociativity = 4
Memory:L2CacheNumSets = 512
Memory.Cache*:RequestBufferSize = 2   # size of buffer for requests from L1 to L2
Memory.Cache*:ResponseBufferSize = 2  # size of buffer for responses from L2 to L1

# Memory.RootDir*:DDRChannelID = 0 # When left out, defaults to the Root Directory ID
Memory.RootDir*:ExternalOutputQueueSize = 16
Memory.RootDir*:ExternalInputQueueSize = 16

#
# Configuration for direct core-DDR interconnects
#

# Memory:NumInterfaces     = 4    # When left out, will default to NumProcessors
# Memory:InterfaceSelector = DIRECT # When left out, defaults to DIRECT for DDR, RMIX for RANDOMDDR

# Memory.ExtIf*:DDRChannelID = 0 # When left out, defaults to the ExtIf ID
Memory.ExtIf*:ExternalOutputQueueSize = 16
Memory.ExtIf*:ExternalInputQueueSize = 16

#
# External DDR Channel configuration
# (common COMA and DDR systems)
#

# *.DDR.NumChannels     = 1 # When left out, defaults to either Memory:NumRootDirectories (COMA) or Memory:NumInterfaces (DDR)

# DDR3 constants:
Memory.DDR.Channel*:CellSize       = 8 # DDR: 1 byte.
Memory.DDR.Channel*:BurstLength    = 8 # DDR3: data rate (2) times multiplier (4)

# Latencies in DDR specs are expressed in tCK (mem cycles).

# DDR chip timings, defaults appropriate for DDR3-1600
# Configuration based on the Micron MT41J128M8.

Memory.DDR.Channel*:Freq = 800 # MHz
Memory.DDR.Channel*.Config:tCL  = 11   # CAS Latency (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tRCD = 11   # RAS to CAS Delay (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tRP  = 11   # RAS Precharge Delay (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tRAS = 28   # RAS Active Delay (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tCWL = 8    # CAS Write Latency (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tCCD = 4    # CAS to CAS delay (in mem clock cycles = tCK)
Memory.DDR.Channel*.Config:tWR = 15    # Write recovery time in nanoseconds
# tWR: see http://www.samsung.com/global/business/semiconductor/products/dram/downloads/applicationnote/tWR.pdf

# Memory.DDR.Channel*.Config.tAL  = 0    # Additive Latency (in mem clock cycles = tCK) - NOT USED


# DDR chip timings for DDR3-2400
# Configuration based on Kingston HyperX technology
# see http://www.legitreviews.com/article/1274/4/
#
#Memory.DDR.Channel*:Freq = 1200 # MHz
#Memory.DDR.Channel*.Config:tCL  = 9
#Memory.DDR.Channel*.Config:tRCD = 11
#Memory.DDR.Channel*.Config:tRP  = 9
#Memory.DDR.Channel*.Config:tRAS = 27
#Memory.DDR.Channel*.Config:tCWL = 10   # CWL goes up as the frequency goes up
#Memory.DDR.Channel*.Config:tCCD = 4    # CCD minimum according to JEDEC
#Memory.DDR.Channel*.Config:tWR = 15    # Write recovery time in nanoseconds
# tWR: see http://www.samsung.com/global/business/semiconductor/products/dram/downloads/applicationnote/tWR.pdf

# DDR data layout
# defaults suitable for 4GB DIMM with ECC.
Memory.DDR.Channel*.Config:DevicesPerRank = 8
Memory.DDR.Channel*.Config:Ranks          = 2
Memory.DDR.Channel*.Config:Banks          = 8
Memory.DDR.Channel*.Config:RowBits        = 15
Memory.DDR.Channel*.Config:ColumnBits     = 10

#######################################################################################
###### Memory ranges configuration
#######################################################################################

# Since on-chip memory protection is not yet implemented, programs
# would have read/write/execute permission to the entire address
# space. This is undesirable because it makes it difficult to
# troubleshoot software access bugs. So we implement in simulation an
# extra layer of protection that checks all memory accesses by cores
# and DCA against an internal permission database. (This is not part
# of the simulated hardware.)  Most of this database is derived
# automatically from the loaded program, based on the ELF section
# permissions. However it is also possible to configure extra ranges
# here.
NumMemoryRanges = 0

# example configuration:
# MemoryRange0:Address = 0xdeadbeef  # base address
# MemoryRange0:Size    = 0xcafebabe  # number of bytes
# MemoryRange0:Mode    = RW          # permissions
# MemoryRange0:PID     = 0           # owner PID

#######################################################################################
###### I/O bus configuration
#######################################################################################

NumIOBuses = 1

IOBUS0:Type = NULLIO
IOBUS0:Freq = 1000    # MHz

#######################################################################################
###### Configuration for the Core - I/O bus interface
#######################################################################################

CPU0:EnableIO = true

*.IO_IF.AIO:MMIO_BaseAddr = 0x40000000     # base address for load/stores to I/O devices
*.IO_IF.PNC:MMIO_BaseAddr = 0x3fffff00     # base address for notification waits

*.IO_IF.AIO:DeviceAddressBits = 24   # address space size per device
*.IO_IF:NumDeviceSlots = 16          # number of devices supported (number of address spaces from AsyncIOBaseAddr)
*.IO_IF:NumNotificationChannels = 8     # number of notification channels (number of words from PNCBaseAddr)
*.IO_IF.BUS_IF:OutgoingRequestQueueSize = 3 # should be at least 3 to accommodate for pipeline loopback
*.IO_IF.RRMux:WritebackQueueSize = 3        # idem
*.IO_IF.RRMux:IncomingQueueSize = 2         # response queue from bus
*.IO_IF.NMux:NotificationQueueSize = 2      # notification queue from bus

*.IO_IF.DCA:RequestQueueSize = 2     # requests from I/O device to memory
*.IO_IF.DCA:ResponseQueueSize = 2    # responses from memory to I/O device

# Example to connect CPU1:
# CPU1:EnableIO = true

# Configure AROMs to push contents using DCA via core 0
*:DCATargetID = 0
*:DCANotificationChannel = 0

#######################################################################################
###### I/O device configuration
#######################################################################################


IODevices = stduart, stdrpc, stdlcd, tinylcd, clock, gfx, bootrom, argvrom, cfgrom, smc

StdUART:Type = UART
StdRPC:Type = RPC
BootROM:Type = AROM
CfgROM:Type = AROM
ArgvROM:Type = AROM
StdLCD:Type = LCD
TinyLCD:Type = LCD
Clock:Type = RTC
Gfx:Type = GFX
SMC:Type = SMC

# connect all devices to bus 0
*:BusID = 0
# DeviceID = 0   # when left out, each connected device receives the next available ID on the bus.
# EnableDevice = true  # when left out, defaults to true. Can be used to deactivate a device while keeping its configuration data.

#
# UART settings
#
# specific settings for console first:
StdUART:UARTConnectMode = STDIO

# It is also possible to bind to the TTY even with redirects:
# StdUART.UARTConnectMode = FILE
# StdUART.UARTFile = /dev/tty

# Example using different files for input and output
# StdUART.UARTConnectMode = FILEPAIR
# StdUART.UARTInputFile = /dev/urandom
# StdUART.UARTOutputFile = /dev/tty

# defaults for all UARTs:
*:UARTInputFIFOSize = 16
*:UARTOutputFIFOSize = 16

# defaults for all RPC interfaces:
# *:RPCLineSize # when left out, default to CacheLineSize
*:RPCBufferSize1 = 2KiB
*:RPCBufferSize2 = 2KiB
*:RPCIncomingQueueSize = 2
*:RPCReadyQueueSize = 2
*:RPCCompletedQueueSize = 2
*:RPCNotificationQueueSize = 2

#
# LCD settings
#

# specific settings for console first:
StdLCD:LCDDisplayWidth = 80
StdLCD:LCDDisplayHeight = 25
StdLCD:LCDOutputRow = 1
StdLCD:LCDOutputColumn = 1
StdLCD:LCDBackgroundColor = 0
StdLCD:LCDForegroundColor = 7

# defaults for all LCDs:
*:LCDDisplayWidth = 16
*:LCDDisplayHeight = 2
*:LCDOutputRow = 10
*:LCDOutputColumn = 32
*:LCDBackgroundColor = 2
*:LCDForegroundColor = 0
# *:LCDTraceFile = /path/to/file # if set, causes the LCD output to be copied to the specified file.

#
# RTC settings
#
# There can be several RTCs in the system.

*:RTCUpdateFreq = 1 # megahertz of simulated time

# this applies to the update timer shared by all RTC clocks.
RTCMeatSpaceUpdateInterval = 100000 # microseconds of real time


#
# Graphical output
#
# There can be several Gfxs in the system,
# however only one can have GfxEnableSDLOutput = true.

# *:GfxFrameBufferDeviceID = N  # When omitted, defaults to DeviceID + 1
*:GfxFrameSize       = 5MiB  # good for max rez 1280x1024x32bpp
*:GfxEnableSDLOutput = true

# these apply to the unique SDL graphical output
SDLHorizScale      = 2
SDLVertScale       = 2
SDLRefreshDelay    = 1000000 # number of master cycles between updates

#######################################################################################
###### SMC / Boot configuration
#######################################################################################

# *:ROMLineSize = 64 # if left out, defaults to CacheLineSize
# *:ROMBaseAddr = 0 # if specified and not zero, indicates the default base address in main memory where the ROM contents are copied during DCA

*:PreloadROMToRAM = false # if set, preload DRAM with ROM contents (do not initialize using DCA)

# Config ROM
CfgROM:ROMContentSource = CONFIG
CfgROM:ROMBaseAddr = 0x2000000

# Arguments ROM
ArgvROM:ROMContentSource = ARGV
ArgvROM:ROMBaseAddr = 0x3000000

# Boot ROM
BootROM:ROMContentSource = ELF
BootROM:PreloadROMToRAM = false # if true, preload DRAM with ROM contents (do not initialize using DCA)

SMC:LinkedROM = BootROM
SMC:LinkedProcessor = cpu0
SMC:BootProcessor = true
