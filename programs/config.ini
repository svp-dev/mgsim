[global]

CmdLineRegs = # can be overridden on the command line with -R/-F/-L
CmdLineFileDevs = # can be overriden with -L on the command line

NumProcessors = 128
NumProcessorsPerFPU = 2

MemoryType = RandomBanked

#
# Monitor settings
#
MonitorSampleDelay = 0.001 # delay in seconds
MonitorSampleVariables = cpu*.pipeline.execute.op, cpu*.pipeline.execute.flop
MonitorMetadataFile = mgtrace.md
MonitorTraceFile = mgtrace.out

#
# Event checking for the selector(s)
#
EventCheckFreq = 1 # megahertz of simulated time

#######################################################################################
###### Common core configuration
#######################################################################################

[global]

# Shared by all processors - for now
CoreFreq = 1000    # MHz

# The control block is the sequence of instructions controlled by one
# control word. The control word contains exactly 2 bits per
# instruction in the control block.  On our targets, instructions are
# 32-bit wide.  A control word has also at most the size of an instruction.
# So the control word defines a control block of at most 32/2 = 16 instructions.
# This is 64 bytes (4 bytes per instruction). A smaller control block
# is possible, for example to allow for a smaller cache line size.
ControlBlockSize = 64

#
# Core/memory interface constants
#
# the cache line size is pervasive, we don't support fine-grained
# configuration of this yet.
CacheLineSize    = 64	# Must be at least ControlBlockSize, and a power of two


#
# Network settings
#
[CPU*.Network]
:LoadBalanceThreshold = 1

#
# L1 Cache configuration
#

#
# Instruction Cache
# Total Size = ICacheNumSets * ICacheAssociativity * CacheLineSize
#
[CPU*.ICache]
:Associativity = 4
:NumSets       = 8
:OutgoingBufferSize = 2
:IncomingBufferSize = 2
:BankSelector  = DIRECT

#
# Data Cache
# Total Size = DCacheNumSets * DCacheAssociativity * CacheLineSize
#
[CPU*.DCache]
:Associativity = 4
:NumSets       = 16
:ReadResponsesBufferSize = 2
:WriteResponsesBufferSize = 2
:ReadWritebacksBufferSize = 2;
:OutgoingBufferSize = 2
:IncomingBufferSize = 2
:BankSelector  = XORFOLD

#
# Thread and Family Table
#
# FIXME: this ought to be configurable per core, however for now the
# network code does not properly adjust the TID and FID widths.  so we
# use a single shared configuration for the time being.
[CPU*]
Threads:NumEntries = 256
Families:NumEntries = 32

#
# Register file
#
# FIXME: this ought to be configurable per core, however for now
# the network code does not properly adjust the RID width. so
# we use a single shared configuration for the time being.
[CPU*.Registers]
:NumIntRegisters       = 1024
:NumFltRegisters       = 1024

[global]
IntRegAliases = # automatically preset if empty
FltRegAliases = # automatically preset if empty

#
# Register allocation unit
#
[CPU*.RAU]
:IntRegistersBlockSize = 32
:FltRegistersBlockSize = 32

#
# Pipeline
#
[CPU*.Pipeline]
:NumDummyStages = 0  # Number of delay stages between Memory and Writeback

#
# Ancillary registers
#
[CPU*]
:NumAncillaryRegisters = 1

#
# Thread/family allocator
#

[CPU*.Alloc]
# :InitialThreadAllocateQueueSize = 32 # if not set, defaults to Families.NumEntries, because there cannot be more families waiting for initial thread allocation.
# :CreateQueueSize  = 32 # if not set, defaults to defaults to Families.NumEntries, because there cannot be more families waiting for creation.
# :ThreadCleanupQueueSize = 256 # if not set, defaults to Threads.NumEntries, because there cannot be more threads waiting for final thread cleanup.

# FIXME: The following allocate queues should not be unbounded, but
# they have to be until the network implements separate channels for
# suspending and non-suspending operations.
:FamilyAllocationSuspendQueueSize = -1
:FamilyAllocationNoSuspendQueueSize = -1
:FamilyAllocationExclusiveQueueSize = -1

#
# Settings for on-die misc. I/O components
#
[CPU*]
# *:MMIO_BaseAddr = 0 # if specified and not zero, connects the component to the MMIO match unit on the core

# NB: although the following seem configurable, understand that
# software will use these base addresses as architectural constants.
# Any change is likely to mean having to modify software source code and/or
# hand-coded assembly.

PerfCounters:MMIO_BaseAddr = 8
Debug_Stdout:MMIO_BaseAddr = 0x200
Debug_Stderr:MMIO_BaseAddr = 0x230
Action:MMIO_BaseAddr = 0x260
MMU:MMIO_BaseAddr = 0x300
ASRs:MMIO_BaseAddr = 0x400
APRs:MMIO_BaseAddr = 0x500

#######################################################################################
###### Per-FPU configuration
#######################################################################################

[global]
FPU_AddSubLatency = 3
FPU_MulLatency = 3
FPU_DivLatency = 8
FPU_SqrtLatency = 10

[FPU*]

:NumUnits        = 5         # Number of FPU pipelines
Source*:InputQueueSize = 2  # queue size from each processor

:Unit0Ops       = Add,Sub
:Unit0Latency   = $FPU_AddSubLatency
:Unit0Pipelined = true

:Unit1Ops       = Add,Sub
:Unit1Latency   = $FPU_AddSubLatency
:Unit1Pipelined = true

:Unit2Ops       = Mul
:Unit2Latency   = $FPU_MulLatency
:Unit2Pipelined = true

:Unit3Ops       = Div
:Unit3Latency   = $FPU_DivLatency
:Unit3Pipelined = false

:Unit4Ops       = Sqrt
:Unit4Latency   = $FPU_SqrtLatency
:Unit4Pipelined = false

#######################################################################################
###### Memory network configuration
#######################################################################################
[global]
MemoryFreq = 1000  # MHz

[Memory]
# Serial, Parallel, Banked and RandomBanked memory
# 
:BaseRequestTime  = 1
:TimePerLine      = 1
:BufferSize       = 16

# Banked and RandomBanked memory
# 
:NumBanks    = $NumProcessors
# :BankSelector = DIRECT # When left out, defaults to DIRECT for BANKEDMEMORY, RMIX for RANDOMBANKED, XORFOLD for CDMA/ZLCDMA

#
# COMA memory settings
#
:NumClientsPerL2Cache = 4

:NumL2CachesPerRing      = 8 # Previously called NumL2CachesPerDirectory
:NumRootDirectories      = 4

:EnableCacheInjection = true # For ZLCDMA only

*:NodeBufferSize = 2 # Size of incoming and outgoing buffer on the ring nodes

# L2 cache parameters
:L2CacheAssociativity = 4
:L2CacheNumSets = 512
Cache*:RequestBufferSize = 2   # size of buffer for requests from L1 to L2
Cache*:ResponseBufferSize = 2  # size of buffer for responses from L2 to L1

# Memory.RootDir*:DDRChannelID = 0 # When left out, defaults to the Root Directory ID
RootDir*:ExternalOutputQueueSize = 16
RootDir*:ExternalInputQueueSize = 16

#
# Configuration for direct core-DDR interconnects
#

:NumInterfaces     = $NumProcessors
# :InterfaceSelector = DIRECT # When left out, defaults to DIRECT for DDR, RMIX for RANDOMDDR

# ExtIf*:DDRChannelID = 0 # When left out, defaults to the ExtIf ID
ExtIf*:ExternalOutputQueueSize = 16
ExtIf*:ExternalInputQueueSize = 16


[Memory.DDR]
#
# External DDR Channel configuration
# (common CDMA and DDR systems)
#

# NumChannels     = 1 # When left out, defaults to either Memory:NumRootDirectories (CDMA) or Memory:NumInterfaces (DDR)

[Memory.DDR.Channel*]

# DDR3 constants:
:CellSize       = 8 # DDR: 1 byte.
:BurstLength    = 8 # DDR3: data rate (2) times multiplier (4)

# Latencies in DDR specs are expressed in tCK (mem cycles).

# DDR chip timings, defaults appropriate for DDR3-1600
# Configuration based on the Micron MT41J128M8.

:Freq = 800 # MHz
Config:tCL  = 11   # CAS Latency (in mem clock cycles = tCK)
Config:tRCD = 11   # RAS to CAS Delay (in mem clock cycles = tCK)
Config:tRP  = 11   # RAS Precharge Delay (in mem clock cycles = tCK)
Config:tRAS = 28   # RAS Active Delay (in mem clock cycles = tCK)
Config:tCWL = 8    # CAS Write Latency (in mem clock cycles = tCK)
Config:tCCD = 4    # CAS to CAS delay (in mem clock cycles = tCK)
Config:tWR = 15    # Write recovery time in nanoseconds
# tWR: see http://www.samsung.com/global/business/semiconductor/products/dram/downloads/applicationnote/tWR.pdf

# Config:tAL  = 0    # Additive Latency (in mem clock cycles = tCK) - NOT USED


# DDR chip timings for DDR3-2400
# Configuration based on Kingston HyperX technology
# see http://www.legitreviews.com/article/1274/4/
#
# Freq = 1200 # MHz
# Config:tCL  = 9
# Config:tRCD = 11
# Config:tRP  = 9
# Config:tRAS = 27
# Config:tCWL = 10   # CWL goes up as the frequency goes up
# Config:tCCD = 4    # CCD minimum according to JEDEC
# Config:tWR = 15    # Write recovery time in nanoseconds
# tWR: see http://www.samsung.com/global/business/semiconductor/products/dram/downloads/applicationnote/tWR.pdf

# DDR data layout
# defaults suitable for 4GB DIMM with ECC.
Config:DevicesPerRank = 8
Config:Ranks          = 2
Config:Banks          = 8
Config:RowBits        = 15
Config:ColumnBits     = 10

#######################################################################################
###### Memory ranges configuration
#######################################################################################
[global]

# Since on-chip memory protection is not yet implemented, programs
# would have read/write/execute permission to the entire address
# space. This is undesirable because it makes it difficult to
# troubleshoot software access bugs. So we implement in simulation an
# extra layer of protection that checks all memory accesses by cores
# and DCA against an internal permission database. (This is not part
# of the simulated hardware.)  Most of this database is derived
# automatically from the loaded program, based on the ELF section
# permissions. However it is also possible to configure extra ranges
# here.
NumMemoryRanges = 0

# example configuration:
# MemoryRange0:Address = 0xdeadbeef  # base address
# MemoryRange0:Size    = 0xcafebabe  # number of bytes
# MemoryRange0:Mode    = RW          # permissions
# MemoryRange0:PID     = 0           # owner PID

#######################################################################################
###### I/O bus configuration
#######################################################################################
[global]

NumIOBuses = 1

[IOBUS0]
:Type = NULLIO
:Freq = 1000    # MHz

#######################################################################################
###### Configuration for the Core - I/O bus interface
#######################################################################################
[CPU0]
:EnableIO = true

[CPU*.IO_IF]
:NumDeviceSlots = 16          # number of devices supported (number of address spaces from AsyncIOBaseAddr)
:NumNotificationChannels = 8     # number of notification channels (number of words from PNCBaseAddr)

AIO:MMIO_BaseAddr = 0x70000000     # base address for load/stores to I/O devices
AIO:DeviceAddressBits = 24   # address space size per device
PNC:MMIO_BaseAddr = 0x6fffff00     # base address for notification waits

BUS_IF:OutgoingRequestQueueSize = 3 # should be at least 3 to accommodate for pipeline loopback
RRMux:WritebackQueueSize = 3        # idem
RRMux:IncomingQueueSize = 2         # response queue from bus
NMux:NotificationQueueSize = 2      # notification queue from bus

DCA:RequestQueueSize = 2     # requests from I/O device to memory
DCA:ResponseQueueSize = 2    # responses from memory to I/O device

[global]

# Configure AROMs to push contents using DCA via core 0
*:DCATargetID = 0
*:DCANotificationChannel = 0

#######################################################################################
###### I/O device configuration
#######################################################################################
[global]

IODevices = uart0, rpc0, lcd0, lcd1, rtc0, gfx0, rom_boot, rom_argv, rom_config, smc0, $CmdLineFileDevs

# connect all devices to bus 0
*:BusID = 0
# DeviceID = 0   # when left out, each connected device receives the next available ID on the bus.
# EnableDevice = true  # when left out, defaults to true. Can be used to deactivate a device while keeping its configuration data.

[UART*]
#######################
# Common UART settings
#######################
:Type = UART

# defaults for all UARTs:
:UARTInputFIFOSize = 16
:UARTOutputFIFOSize = 16

[UART0]
#
# UART settings specific to the "standard" device uart0
#
# specific settings for console first:
:UARTConnectMode = STDIO

# It is also possible to bind to the TTY even with redirects:
# :UARTConnectMode = FILE
# :UARTFile = /dev/tty

# Example using different files for input and output
# :UARTConnectMode = FILEPAIR
# :UARTInputFile = /dev/urandom
# :UARTOutputFile = /dev/tty

[RPC*]
# defaults for all RPC interfaces:
:Type = RPC
# :RPCLineSize # when left out, default to CacheLineSize
:RPCBufferSize1 = 2KiB
:RPCBufferSize2 = 2KiB
:RPCIncomingQueueSize = 2
:RPCReadyQueueSize = 2
:RPCCompletedQueueSize = 2
:RPCNotificationQueueSize = 2

[LCD*]
# default for all LCD devices:
:Type = LCD
:LCDDisplayWidth = 16
:LCDDisplayHeight = 2
:LCDOutputRow = 10
:LCDOutputColumn = 32
:LCDBackgroundColor = 2
:LCDForegroundColor = 0
# :LCDTraceFile = /path/to/file # if set, causes the LCD output to be copied to the specified file.

[LCD0]
# specific settings for console:
:LCDDisplayWidth = 80
:LCDDisplayHeight = 25
:LCDOutputRow = 1
:LCDOutputColumn = 1
:LCDBackgroundColor = 0
:LCDForegroundColor = 7

[RTC0]
:Type = RTC
:RTCUpdateFreq = 1 # megahertz of simulated time

[global]
# this applies to the update timer shared by all RTC clocks.
RTCMeatSpaceUpdateInterval = 100000 # microseconds of real time

[GFX*]
# Common settings
:Type = GFX

# :GfxFrameBufferDeviceID = N  # When omitted, defaults to DeviceID + 1
:GfxFrameSize       = 5MiB  # good for max rez 1280x1024x32bpp

# There can be several Gfxs in the system,
# however only one can have GfxEnableSDLOutput = true.
:GfxEnableSDLOutput = true

[global]
# these apply to the unique SDL graphical output
SDLHorizScale      = 2
SDLVertScale       = 2
SDLRefreshDelay    = 1000000 # number of master cycles between updates

[ROM*]
# Common ROM configurations
:Type = AROM
:ROMLineSize = $CacheLineSize # ROMLineSize can be smaller or equal to CacheLineSize for DCA
# :ROMBaseAddr = 0 # if specified and not zero, indicates the default base address in main memory where the ROM contents are copied during DCA
:PreloadROMToRAM = false # if set, preload DRAM with ROM contents (do not initialize using DCA)

[ROM_Boot]
:ROMContentSource = ELF
:PreloadROMToRAM = false # if true, preload DRAM with ROM contents (do not initialize using DCA)

[ROM_Argv]
:ROMContentSource = ARGV
:ROMBaseAddr = 0x6ff00000

[ROM_Config]
:ROMContentSource = CONFIG
:ROMBaseAddr = 0x6ff10000


#######################################################################################
###### SMC / Boot configuration
#######################################################################################

[smc0]
:Type = SMC

[cpu0]
:InitRegs = $CmdLineRegs

