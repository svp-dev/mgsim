MGSim, a flexible component-level simulation to study chip architectures.
Copyright (C) 2007,2008,2009,2010,2011,2012,2013 the MGSim project.

The MGSim consists of people listed in the 'AUTHORS' file.

=======================
 Introduction to MGSim
=======================

MGSim, a simulation environment for on-chip circuits that
can be represented as networks of processes.

.. contents::

Overview
========

MGSim is an open source discrete event simulator for on-chip hardware
components developed at the University of Amsterdam. MGSim is used as
research and teaching vehicle to study the fine-grained
hardware/software interactions on many-core chips with and without
hardware multithreading. MGSim's component library includes support
for core models with different instruction sets, a configurable
multi-core interconnect, multiple configurable cache and memory
models, a dedicated I/O subsystem, and comprehensive monitoring and
interaction facilities. The default model configuration shipped with
MGSim implements Microgrids, a multi-core architecture with hardware
concurrency management. MGSim is furthermore written mostly in C++ and
uses object classes to represent chip components. It is optimized for
architecture models that can be described as process networks.

Please send any question or comments about MGSim to microgrids@svp-home.org.

Installation
============

To install MGSim on your system, we recommend the following procedure:

1. create a build directory separate from the source directory; for example::

      mkdir mgsim-build
      cd mgsim-build

2. configure the build system::

      .../configure

   Here you need to select the *simulation target* for MGSim's
   Processor model. The simulation target selects an ISA and a core
   architecture. At this time the following targets are supported:

   ``configure --target=mtalpha``
      Builds a 64-bit Processor with an ISA extending the DEC Alpha.

   ``configure --target=mtsparc``
      Builds a 32-bit Processor with an ISA extending SPARC v8.

3. build MGSim::

     make

4. run the test suite::

     make check

5. Install the simulator and the standard configuration file::

     make install

For more detailed installation tips and tricks, refer to the separate
``INSTALL`` file.

Additional features
===================

If the host system where MGSim is executed does not support IEEE754
floating point semantics, an accurate (but slow) IEEE754 simulation
can be enabled with::

   configure --enable-softfpu

The following parameters can be used to forcefully disabled features
that are otherwise enabled automatically if possible:

``configure --disable-mem-...``
   Disable support for some memory models (use ``configure --help``
   for a list).

``configure --disable-sdl``
   Disable support to output graphics using SDL.

``configure --disable-monitor``
   Disable support for asynchronous simulation monitoring.

Assertion checking within the simulation is enabled by default. This
ensures that consistency checks are performed throughout the
simulation. It is possible to disable assertion checking with the
parameter ``--disable-assert``.

Area calculations with CACTI
----------------------------

The simulator can print the chip area usage of components if
the CACTI_ C++ library is available. To enable this feature, ensure that
the CACTI source files are present in the ``cacti`` subdirectory of
the MGSim sources tree before running ``configure``. For example::

   $ ls ../source/dir
   configure
   Makefile.cacti.inc
   cacti/README
   cacti/io.cc
   cacti/io.h
   cacti/cacti_interface.h
   ...

   $ configure ...

Support for area calculation is enabled automatically if the CACTI
sources are present. To disable this support, the parameter
``--disable-cacti`` can be used as well.

.. _CACTI: http://www.hpl.hp.com/research/cacti/

Requirements
============

MGSim is written in C++ and targets Unix/POSIX platforms.

The system was tested using the `GNU Compiler Collection (GCC)`_
version 4.7.x up to 4.8.x on GNU/Linux, FreeBSD and MacOS X, as well
as CLang 3.1 to 3.3. The code attempts to be fully compliant with
the ISO C++ standard (ISO-IEC 14882) and POSIX, so other C++ compilers
should be usable as well; please report any portability bug you may
find.

.. _GNU Compiler Collection (GCC): http://gcc.gnu.org/

The MGSim source code in turn depends on two libraries: `libev`_ and
`argp`_. Libev is an event handling library, used by MGSim to manage
interactive I/O between the simulation and the outside world. Argp is
a component of the GNU C library; if you are not using the GNU C library,
argp can also be downloaded as a `argp standalone`_ package.

.. _libev: http://software.schmorp.de/pkg/libev.html
.. _argp: https://www.gnu.org/software/libc/manual/html_node/Argp.html
.. _argp standalone: http://www.lysator.liu.se/~nisse/misc/

To (re-)generate the manual pages from text files, you will need
`Docutils`_ and `help2man`_. This is not necessary if you downloaded a
pre-packaged MGSim distribution where these files are already present.

.. _Docutils: http://docutils.sourceforge.net/
.. _help2man: https://www.gnu.org/software/help2man/

To (re-)generate the PDF versions of the manual pages, you will need a
Postscript to PDF converter. The ``ps2pdf`` command bundled with
Ghoscript_ is used if it is found.

.. _Ghostscript: http://www.ghostscript.com/

To assemble/link programs from assembly source, you will need a
modified copy `GNU Binutils`_ with microthreaded extensions. The
latest source code distribution can be found at http://dist.svp-home.org/deploy/.

.. _GNU Binutils: http://www.gnu.org/software/binutils/

The separate simulation trace analysis and reporting tool
``readtrace`` is a Python_ script. This was tested with Python 2.6 and
later.

.. _Python: http://www.python.org/

To enable graphical output to screen, the `Simple DirectMedia Layer`_
library should be available. MGSim was tested with SDL 1.2 and 1.3. If
SDL is not available, MGSim will run and simulate a graphical output,
but the output will not be shown on screen.

.. _Simple DirectMedial Layer: http://www.libsdl.org/

Using MGSim
===========

A number of small programs are provided in the ``tests/`` and
``programs/`` subdirectories. Looking at them is a good way to
understand the machine-level programming interface.

For larger programs and an more global perspective, refer to the
separate SL project which provides higher-level compilers and
demonstration applications.

Layout of the source tree
=========================

The MGSim source code tree layout is as follows:

build-aux
   Auxialiary tools used by the GNU Build System during ``configure``
   and ``make`` stages.

doc
   The documentation.

arch
   Source code for the architecture components.

   drisc
      Simulation for D-RISC cores.

   mem
      Simulation for the memory system.

   dev
      Simulation for I/O buses and devices.

sim
   Source code for the simulation framework.

cli
   Source code for the command-line interpreter.

tests
   The unit test suite.

programs
   Standard configuration and example programs.



Contacts
========

The team can be reached by e-mail at microgrids@svp-home.org. Snail
mail addresses follow.

* MGSim - CSA

  | The CSA group
  | Institute for Informatics, University of Amsterdam
  | Science Park 904
  | 1091XH Amsterdam, The Netherlands


.. Local Variables:
.. mode: rst
.. End:
